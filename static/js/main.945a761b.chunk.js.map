{"version":3,"sources":["components/header.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","App","classNameName","href","Button","variant","size","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yUAGqBA,G,uLAEb,OACI,4BAAQC,UAAU,UACd,8J,GAJoBC,c,QC8CrBC,MA1Cf,WACE,OACE,yBAAKC,cAAc,OACjB,kBAAC,EAAD,MACA,uBAAGH,UAAU,QAAb,4CAIF,wBAAIA,UAAU,MAAd,wCACA,wBAAIA,UAAU,SAAd,oIAAmD,0BAAMA,UAAU,UAAhB,wFAAnD,2fAA0L,0BAAMA,UAAU,UAAhB,6NAG1L,uBAAGA,UAAU,cAAb,oDACA,wBAAIA,UAAU,UAAd,kWACA,wBAAIA,UAAU,OAAd,0bAEA,uBAAGA,UAAU,cAAb,gGACA,6ZAAuE,uBAAGA,UAAU,QAAQI,KAAK,uBAA1B,YAAvE,yPAA4K,uBAAGJ,UAAU,QAAQI,KAAK,0CAA1B,4BAA5K,m3BAEA,uBAAGJ,UAAU,cAAb,gDACA,26BAGA,uBAAGA,UAAU,cAAb,sDACA,qLAA6B,0BAAMA,UAAU,UAAhB,oDAA7B,6XAAoI,0BAAMA,UAAU,UAAhB,kHAApI,+DAAkM,uBAAGA,UAAU,QAAQI,KAAK,+MAA1B,WAAlM,wFAEA,uBAAGJ,UAAU,cAAb,oEACA,uBAAGI,KAAK,uCACR,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,MAA/B,YAGC,uBAAGH,KAAK,0DACR,kBAACC,EAAA,EAAD,CAAQC,QAAQ,OAAOC,KAAK,MAA5B,UAED,uBAAGH,KAAK,mCACR,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,MAA/B,WC9BgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.945a761b.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport './header.css';\r\n\r\nexport default class Header extends Component {\r\n    render(){\r\n        return (\r\n            <header className=\"header\">\r\n                <p>*いろいろと文脈がおかしいところがあります*</p>\r\n            </header>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport './start.css';\nimport Header from './components/header'\nimport { Button } from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <div classNameName=\"App\">\n      <Header />\n      <p className=\"name\">松元士温/shion matsumoto</p>\n    \n    \n    \n    <h2 className=\"h1\">～自己紹介～</h2>\n    <h3 className=\"first\">はじめまして！現在(2020年2月29日時点)高校一年生の<span className=\"name-1\">松元士温（まつもと　しおん）</span>と申します！このサイトは自己紹介をWEBで出来たらカッコよくね？と思い作ってみました(*ﾉωﾉ)あまり面白いことは書いていないと思うのでお暇な時に見ていただけるといいなと思います<span className=\"yohaku\">初めての記事作成なのでミスが多々あると思いますがどうぞお楽しみください！</span></h3>\n\n\n    <p className=\"yohaku pro\">～プロフィール～</p>\n    <h2 className=\"pro h2\">名前:松元士温（まつもと　しおん）年齢：16歳2003年7月30日生まれ職業：学生趣味：プログラミング、ゲーム（FPS,RPG),おしゃべり,映画鑑賞</h2>\n    <h3 className=\"pro\">僕の出身は鹿児島県で現在家族と３人暮らしをしています。普段は学校から帰って直ぐにゲームやプログラミングをしているので暇な方は是非お声かけください！</h3>\n\n    <p className=\"yohaku pro\">～趣味1|プログラミングについて～</p>\n    <h4>自分がプログラミングを始めたのは１～２年ぐらい前なのですが、がっつりやりだしたのは今年（2020年）からでまだまだ初心者なのですが日々<a className=\"link1\" href=\"https://prog-8.com/\">Pro-Gate</a>というサイトでプログラミングの勉強に励んでいます！プログラミングを始めたきっかけは<a className=\"link1\" href=\"https://note.com/aokha/n/n063f853dd255\">草場海斗</a>という人に「お前暇やったらプログラミングやってみてみ、おもろいから」みたいなかんじで誘われたので試しにやってみたらめっっっっちゃ面白かったし、何よりcodeがものすごくかっこよかったのでもっとやってみたい、遊んでみたいという感じになって今に至るわけです(笑)そして現在は、React + React-bootstrap + Githubでstaticなwebsiteを作ってます</h4>\n\n    <p className=\"yohaku pro\">～趣味2|ゲーム～</p>\n    <h4>僕が初めてプレイしたゲームはニンテンドーDSのNew　スーパーマリオブラザーズです。この作品をプレイしたのは小学一年生でしかも超絶飽き性なので八面までクリアせずにやめたのを覚えています（笑）最近やってるゲームはCS:GO,MHWI,PUBGをやっています。特にCS:GOは、ほぼ毎日のようにやっていて毎ラウンド大声をあげながらしんでいます（笑）</h4>\n\n\n    <p className=\"yohaku pro\">～趣味3|映画鑑賞～</p>\n    <h4>僕は３歳の頃に初めて映画を見ました。その時の作品は<span className=\"name-1\">バイオハザード３</span>でとても３歳が見るような作品ではないのですがこの作品のおかげで映画にドハマりしてしまいました（笑）ちなみに好きな映画シリーズは<span className=\"name-1\">トランスフォーマー、マーベル作品、DC系</span>です。どの作品も大体<a className=\"link1\" href=\"https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=2ahUKEwjmupOR9P7nAhWjNKYKHb8pB88QFjAAegQIARAB&url=https%3A%2F%2Fwww.netflix.com%2Fjp%2F&usg=AOvVaw0XaR9lvnN6TGE-LWjQKQ1E\">Netflix</a>にあるので見てみてください！</h4>\n\n    <p className=\"yohaku pro\">～SNS|ゲームアカウント～</p>\n    <a href=\"https://twitter.com/deemontuyoinoka\">\n    <Button variant=\"primary\" size=\"sm\">twitter</Button>\n        </a>\n\n     <a href=\"https://steamcommunity.com/profiles/76561198804543860/\">\n     <Button variant=\"dark\" size=\"sm\">steam</Button>\n        </a>  \n    <a href=\"https://line.me/ti/p/rDfv0I59Xo\">\n    <Button variant=\"success\" size=\"sm\">line</Button>\n      </a>     \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}